from dataclasses import dataclass
from typing import Dict, Any
import json
import os

@dataclass
class ModelParameters:
    temperature: float = 0.7
    top_p: float = 0.9
    top_k: int = 40
    max_tokens: int = 2000
    presence_penalty: float = 0.0
    frequency_penalty: float = 0.0
    stop_sequences: list = None

    def to_dict(self) -> Dict[str, Any]:
        return {
            "temperature": self.temperature,
            "top_p": self.top_p,
            "top_k": self.top_k,
            "max_tokens": self.max_tokens,
            "presence_penalty": self.presence_penalty,
            "frequency_penalty": self.frequency_penalty,
            "stop_sequences": self.stop_sequences or []
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'ModelParameters':
        return cls(**data)

class ModelConfig:
    def __init__(self):
        self.config_file = "model_config.json"
        self.model_configs = self.load_configs()

    def load_configs(self) -> Dict[str, ModelParameters]:
        """Load model configurations from file"""
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                data = json.load(f)
                return {
                    model: ModelParameters.from_dict(params)
                    for model, params in data.items()
                }
        return self.get_default_configs()

    def save_configs(self):
        """Save current configurations to file"""
        with open(self.config_file, 'w') as f:
            json.dump(
                {
                    model: params.to_dict()
                    for model, params in self.model_configs.items()
                },
                f,
                indent=2
            )

    def get_default_configs(self) -> Dict[str, ModelParameters]:
        """Get default configurations for supported models"""
        return {
            "deepseek-coder": ModelParameters(
                temperature=0.7,
                top_p=0.95,
                top_k=50,
                max_tokens=2000,
                presence_penalty=0.0,
                frequency_penalty=0.0
            ),
            "deepseek-r1": ModelParameters(
                temperature=0.8,
                top_p=0.9,
                top_k=40,
                max_tokens=1500,
                presence_penalty=0.1,
                frequency_penalty=0.1
            ),
            "mistral": ModelParameters(
                temperature=0.7,
                top_p=0.9,
                top_k=40,
                max_tokens=2000,
                presence_penalty=0.0,
                frequency_penalty=0.0
            )
        }

    def get_model_parameters(self, model_name: str) -> ModelParameters:
        """Get parameters for specific model"""
        return self.model_configs.get(model_name, ModelParameters())

    def update_model_parameters(self, model_name: str, params: ModelParameters):
        """Update parameters for specific model"""
        self.model_configs[model_name] = params
        self.save_configs()
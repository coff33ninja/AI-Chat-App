from PyQt6.QtWidgets import (
    QTabWidget, QWidget, QVBoxLayout, QTextEdit,
    QPushButton, QLineEdit, QHBoxLayout
)
from PyQt6.QtCore import pyqtSignal
from chat_history import ChatHistory
import logging

logger = logging.getLogger('ui.tabs')

class ChatTab(QWidget):
    message_sent = pyqtSignal(str, str)  # (message, model_name)

    def __init__(self, model_name: str, parent=None):
        super().__init__(parent)
        self.model_name = model_name
        self.chat_history = ChatHistory()
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # Chat display
        self.output_display = QTextEdit()
        self.output_display.setReadOnly(True)
        layout.addWidget(self.output_display)

        # Input area
        input_layout = QHBoxLayout()
        
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("Type your message...")
        self.input_field.returnPressed.connect(self.send_message)
        
        self.send_button = QPushButton("Send")
        self.send_button.clicked.connect(self.send_message)
        
        input_layout.addWidget(self.input_field)
        input_layout.addWidget(self.send_button)
        
        layout.addLayout(input_layout)

    def send_message(self):
        message = self.input_field.text().strip()
        if message:
            self.message_sent.emit(message, self.model_name)
            self.input_field.clear()

    def append_message(self, role: str, content: str):
        self.output_display.append(f"{role}: {content}\n")
        self.chat_history.add_message(role, content)

class TabManager(QTabWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setTabsClosable(True)
        self.tabCloseRequested.connect(self.close_tab)
        
        # Add "+" button for new tabs
        self.addTab(QWidget(), "+")
        self.tabBarClicked.connect(self.handle_tab_click)
        
        logger.info("Tab manager initialized")

    def create_new_tab(self, model_name: str):
        """Create a new chat tab"""
        tab = ChatTab(model_name)
        index = self.count() - 1  # Insert before the "+" tab
        self.insertTab(index, tab, f"Chat {index + 1}")
        self.setCurrentIndex(index)
        logger.debug(f"Created new tab with model: {model_name}")
        return tab

    def close_tab(self, index: int):
        """Close a tab"""
        if self.count() > 2:  # Don't close if it's the last chat tab
            tab = self.widget(index)
            if isinstance(tab, ChatTab):
                tab.chat_history.save_session()
            self.removeTab(index)
            logger.debug(f"Closed tab at index: {index}")

    def handle_tab_click(self, index: int):
        """Handle tab clicks, especially for the "+" tab"""
        if index == self.count() - 1:
            # Clicked on "+" tab, create new tab
            self.create_new_tab("deepseek-coder")  # Default model
            logger.debug("Created new tab via '+' button")
import json
import os
from datetime import datetime
from typing import List, Dict

class ChatHistory:
    def __init__(self, storage_dir: str = "chat_history"):
        self.storage_dir = storage_dir
        self.current_session = []
        self.ensure_storage_exists()

    def ensure_storage_exists(self):
        """Create storage directory if it doesn't exist"""
        if not os.path.exists(self.storage_dir):
            os.makedirs(self.storage_dir)

    def add_message(self, role: str, content: str):
        """Add a message to the current session"""
        message = {
            "role": role,
            "content": content,
            "timestamp": datetime.now().isoformat()
        }
        self.current_session.append(message)

    def save_session(self, session_name: str = None):
        """Save current session to file"""
        if not self.current_session:
            return

        if session_name is None:
            session_name = datetime.now().strftime("%Y%m%d_%H%M%S")

        filename = os.path.join(self.storage_dir, f"chat_{session_name}.json")
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump({
                "session_name": session_name,
                "messages": self.current_session,
                "metadata": {
                    "created_at": datetime.now().isoformat(),
                    "message_count": len(self.current_session)
                }
            }, f, indent=2)

    def load_session(self, session_name: str) -> List[Dict]:
        """Load a specific session"""
        filename = os.path.join(self.storage_dir, f"chat_{session_name}.json")
        
        if not os.path.exists(filename):
            return []

        with open(filename, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data.get("messages", [])

    def list_sessions(self) -> List[str]:
        """List all available chat sessions"""
        sessions = []
        for filename in os.listdir(self.storage_dir):
            if filename.startswith("chat_") and filename.endswith(".json"):
                sessions.append(filename[5:-5])  # Remove 'chat_' prefix and '.json' suffix
        return sorted(sessions, reverse=True)

    def export_session(self, session_name: str, format: str = "txt"):
        """Export session in various formats"""
        messages = self.load_session(session_name)
        
        if format == "txt":
            filename = os.path.join(self.storage_dir, f"chat_{session_name}.txt")
            with open(filename, 'w', encoding='utf-8') as f:
                for msg in messages:
                    f.write(f"{msg['role'].upper()}: {msg['content']}\n\n")
        
        elif format == "markdown":
            filename = os.path.join(self.storage_dir, f"chat_{session_name}.md")
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(f"# Chat Session: {session_name}\n\n")
                for msg in messages:
                    f.write(f"### {msg['role'].title()}\n")
                    f.write(f"{msg['content']}\n\n")